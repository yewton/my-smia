services:
  database:
    image: postgres:latest
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: "ostock_dev"
    profiles: [ "external" ]
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  config-server:
    image: ostock/config-server:chapter12
    container_name: configServer
    profiles: [ "app" ]
    ports:
      - 8071:8071
    environment:
      SPRING_PROFILES_ACTIVE: native
      SERVER_PORT: 8071
    networks:
      - backend
    volumes:
      - ../config/local/:/config/
      - ../config-repo/local/:/config-repo/
  eureka-server:
    image: ostock/eureka-server:chapter12
    container_name: eurekaServer
    profiles: [ "app" ]
    ports:
      - 8070:8070
    environment:
      SERVER_PORT: 8070
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
    networks:
      - backend
  gateway-server:
    image: ostock/gateway-server:chapter12
    container_name: gateway
    profiles: [ "app" ]
    ports:
      - 8072:8072
    environment:
      SERVER_PORT: 8072
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: DEBUG
    depends_on:
      config-server:
        condition: service_started
      eureka-server:
        condition: service_started
      logstash:
        condition: service_started
      zipkin:
        condition: service_started
    networks:
      - backend
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    profiles: [ "external" ]
    ports:
      - 2181:2181
    networks:
      - backend
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    profiles: [ "external" ]
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: dresses:1:1,ratings:1:1
    volumes:
      - "${HOME}/.docker/desktop/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      - backend
  redis:
    image: redis:alpine
    container_name: redis
    profiles: [ "external" ]
    ports:
      - 6379:6379
    networks:
      - backend
  redis-insight:
    image: redislabs/redisinsight:1.13.0
    container_name: redis-insight
    profiles: [ "external" ]
    ports:
      - 8003:8001
    volumes:
      - redis-insight:/db
    networks:
      - backend
  authentication-service:
    image: ostock/authentication-service:chapter12
    container_name: authenticationService
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: 8082
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
    profiles: [ "app" ]
    ports:
      - "8082:8082"
    networks:
      - backend
  licensing-service:
    image: ostock/licensing-service:chapter12
    container_name: licensingService
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: 8080
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: DEBUG
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
      authentication-service:
        condition: service_started
      kafka:
        condition: service_started
      logstash:
        condition: service_started
      zipkin:
        condition: service_started
    profiles: [ "app" ]
    ports:
      - 8080:8080
    networks:
      - backend
  organization-service:
    image: ostock/organization-service:chapter12
    container_name: organizationService
    environment:
      SPRING_PROFILES_ACTIVE: dev
      SERVER_PORT: 8081
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
      kafka:
        condition: service_started
      logstash:
        condition: service_started
      zipkin:
        condition: service_started
    profiles: [ "app" ]
    ports:
      - 8081:8081
    networks:
      - backend
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      node.name: elasticsearch
      discovery.type: single-node
      cluster.name: docker-cluster
      bootstrap.memory_lock: true
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    profiles: [ "external" ]
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      - backend
  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    profiles: [ "external" ]
    ports:
      - 5601:5601
    networks:
      - backend
    depends_on:
      - elasticsearch
  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    profiles: [ "external" ]
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - 5000:5000
    networks:
      - backend
    depends_on:
      - elasticsearch
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      STORAGE_TYPE: elasticsearch
      ES_HOSTS: elasticsearch:9300
    profiles: [ "external" ]
    ports:
      - 9411:9411
    networks:
      - backend

volumes:
  esdata1:
    driver: local
  redis-insight:
    driver: local
networks:
  backend:
    driver: bridge
